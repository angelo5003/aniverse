/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetAnimeData(\n    $page: Int = 1\n    $id: Int\n    $type: MediaType\n    $isAdult: Boolean = false\n    $search: String\n    $format: [MediaFormat]\n    $status: MediaStatus\n    $countryOfOrigin: CountryCode\n    $source: MediaSource\n    $season: MediaSeason\n    $seasonYear: Int\n    $year: String\n    $onList: Boolean\n    $yearLesser: FuzzyDateInt\n    $yearGreater: FuzzyDateInt\n    $episodeLesser: Int\n    $episodeGreater: Int\n    $durationLesser: Int\n    $durationGreater: Int\n    $chapterLesser: Int\n    $chapterGreater: Int\n    $volumeLesser: Int\n    $volumeGreater: Int\n    $licensedBy: [Int]\n    $isLicensed: Boolean\n    $genres: [String]\n    $excludedGenres: [String]\n    $tags: [String]\n    $excludedTags: [String]\n    $minimumTagRank: Int\n    $sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]\n    $genre: String\n    $averageScore: Int\n    $tagCategory: String\n    $tag: String\n  ) {\n    Page(page: $page, perPage: 10) {\n      pageInfo {\n        hasNextPage\n      }\n      media(\n        id: $id\n        type: $type\n        season: $season\n        format_in: $format\n        status: $status\n        countryOfOrigin: $countryOfOrigin\n        source: $source\n        search: $search\n        onList: $onList\n        seasonYear: $seasonYear\n        startDate_like: $year\n        startDate_lesser: $yearLesser\n        startDate_greater: $yearGreater\n        episodes_lesser: $episodeLesser\n        episodes_greater: $episodeGreater\n        duration_lesser: $durationLesser\n        duration_greater: $durationGreater\n        chapters_lesser: $chapterLesser\n        chapters_greater: $chapterGreater\n        volumes_lesser: $volumeLesser\n        volumes_greater: $volumeGreater\n        licensedById_in: $licensedBy\n        isLicensed: $isLicensed\n        genre_in: $genres\n        genre_not_in: $excludedGenres\n        tag_in: $tags\n        tag_not_in: $excludedTags\n        minimumTagRank: $minimumTagRank\n        sort: $sort\n        isAdult: $isAdult\n        genre: $genre\n        averageScore: $averageScore\n        tagCategory: $tagCategory\n        tag: $tag\n      ) {\n        id\n        title {\n          english\n          native\n          romaji\n        }\n        isAdult\n        seasonYear\n        format\n        averageScore\n        coverImage {\n          color\n          large\n        }\n        tags {\n          category\n          description\n          isAdult\n          rank\n          name\n        }\n      }\n    }\n  }\n": typeof types.GetAnimeDataDocument,
};
const documents: Documents = {
    "\n  query GetAnimeData(\n    $page: Int = 1\n    $id: Int\n    $type: MediaType\n    $isAdult: Boolean = false\n    $search: String\n    $format: [MediaFormat]\n    $status: MediaStatus\n    $countryOfOrigin: CountryCode\n    $source: MediaSource\n    $season: MediaSeason\n    $seasonYear: Int\n    $year: String\n    $onList: Boolean\n    $yearLesser: FuzzyDateInt\n    $yearGreater: FuzzyDateInt\n    $episodeLesser: Int\n    $episodeGreater: Int\n    $durationLesser: Int\n    $durationGreater: Int\n    $chapterLesser: Int\n    $chapterGreater: Int\n    $volumeLesser: Int\n    $volumeGreater: Int\n    $licensedBy: [Int]\n    $isLicensed: Boolean\n    $genres: [String]\n    $excludedGenres: [String]\n    $tags: [String]\n    $excludedTags: [String]\n    $minimumTagRank: Int\n    $sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]\n    $genre: String\n    $averageScore: Int\n    $tagCategory: String\n    $tag: String\n  ) {\n    Page(page: $page, perPage: 10) {\n      pageInfo {\n        hasNextPage\n      }\n      media(\n        id: $id\n        type: $type\n        season: $season\n        format_in: $format\n        status: $status\n        countryOfOrigin: $countryOfOrigin\n        source: $source\n        search: $search\n        onList: $onList\n        seasonYear: $seasonYear\n        startDate_like: $year\n        startDate_lesser: $yearLesser\n        startDate_greater: $yearGreater\n        episodes_lesser: $episodeLesser\n        episodes_greater: $episodeGreater\n        duration_lesser: $durationLesser\n        duration_greater: $durationGreater\n        chapters_lesser: $chapterLesser\n        chapters_greater: $chapterGreater\n        volumes_lesser: $volumeLesser\n        volumes_greater: $volumeGreater\n        licensedById_in: $licensedBy\n        isLicensed: $isLicensed\n        genre_in: $genres\n        genre_not_in: $excludedGenres\n        tag_in: $tags\n        tag_not_in: $excludedTags\n        minimumTagRank: $minimumTagRank\n        sort: $sort\n        isAdult: $isAdult\n        genre: $genre\n        averageScore: $averageScore\n        tagCategory: $tagCategory\n        tag: $tag\n      ) {\n        id\n        title {\n          english\n          native\n          romaji\n        }\n        isAdult\n        seasonYear\n        format\n        averageScore\n        coverImage {\n          color\n          large\n        }\n        tags {\n          category\n          description\n          isAdult\n          rank\n          name\n        }\n      }\n    }\n  }\n": types.GetAnimeDataDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAnimeData(\n    $page: Int = 1\n    $id: Int\n    $type: MediaType\n    $isAdult: Boolean = false\n    $search: String\n    $format: [MediaFormat]\n    $status: MediaStatus\n    $countryOfOrigin: CountryCode\n    $source: MediaSource\n    $season: MediaSeason\n    $seasonYear: Int\n    $year: String\n    $onList: Boolean\n    $yearLesser: FuzzyDateInt\n    $yearGreater: FuzzyDateInt\n    $episodeLesser: Int\n    $episodeGreater: Int\n    $durationLesser: Int\n    $durationGreater: Int\n    $chapterLesser: Int\n    $chapterGreater: Int\n    $volumeLesser: Int\n    $volumeGreater: Int\n    $licensedBy: [Int]\n    $isLicensed: Boolean\n    $genres: [String]\n    $excludedGenres: [String]\n    $tags: [String]\n    $excludedTags: [String]\n    $minimumTagRank: Int\n    $sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]\n    $genre: String\n    $averageScore: Int\n    $tagCategory: String\n    $tag: String\n  ) {\n    Page(page: $page, perPage: 10) {\n      pageInfo {\n        hasNextPage\n      }\n      media(\n        id: $id\n        type: $type\n        season: $season\n        format_in: $format\n        status: $status\n        countryOfOrigin: $countryOfOrigin\n        source: $source\n        search: $search\n        onList: $onList\n        seasonYear: $seasonYear\n        startDate_like: $year\n        startDate_lesser: $yearLesser\n        startDate_greater: $yearGreater\n        episodes_lesser: $episodeLesser\n        episodes_greater: $episodeGreater\n        duration_lesser: $durationLesser\n        duration_greater: $durationGreater\n        chapters_lesser: $chapterLesser\n        chapters_greater: $chapterGreater\n        volumes_lesser: $volumeLesser\n        volumes_greater: $volumeGreater\n        licensedById_in: $licensedBy\n        isLicensed: $isLicensed\n        genre_in: $genres\n        genre_not_in: $excludedGenres\n        tag_in: $tags\n        tag_not_in: $excludedTags\n        minimumTagRank: $minimumTagRank\n        sort: $sort\n        isAdult: $isAdult\n        genre: $genre\n        averageScore: $averageScore\n        tagCategory: $tagCategory\n        tag: $tag\n      ) {\n        id\n        title {\n          english\n          native\n          romaji\n        }\n        isAdult\n        seasonYear\n        format\n        averageScore\n        coverImage {\n          color\n          large\n        }\n        tags {\n          category\n          description\n          isAdult\n          rank\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAnimeData(\n    $page: Int = 1\n    $id: Int\n    $type: MediaType\n    $isAdult: Boolean = false\n    $search: String\n    $format: [MediaFormat]\n    $status: MediaStatus\n    $countryOfOrigin: CountryCode\n    $source: MediaSource\n    $season: MediaSeason\n    $seasonYear: Int\n    $year: String\n    $onList: Boolean\n    $yearLesser: FuzzyDateInt\n    $yearGreater: FuzzyDateInt\n    $episodeLesser: Int\n    $episodeGreater: Int\n    $durationLesser: Int\n    $durationGreater: Int\n    $chapterLesser: Int\n    $chapterGreater: Int\n    $volumeLesser: Int\n    $volumeGreater: Int\n    $licensedBy: [Int]\n    $isLicensed: Boolean\n    $genres: [String]\n    $excludedGenres: [String]\n    $tags: [String]\n    $excludedTags: [String]\n    $minimumTagRank: Int\n    $sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]\n    $genre: String\n    $averageScore: Int\n    $tagCategory: String\n    $tag: String\n  ) {\n    Page(page: $page, perPage: 10) {\n      pageInfo {\n        hasNextPage\n      }\n      media(\n        id: $id\n        type: $type\n        season: $season\n        format_in: $format\n        status: $status\n        countryOfOrigin: $countryOfOrigin\n        source: $source\n        search: $search\n        onList: $onList\n        seasonYear: $seasonYear\n        startDate_like: $year\n        startDate_lesser: $yearLesser\n        startDate_greater: $yearGreater\n        episodes_lesser: $episodeLesser\n        episodes_greater: $episodeGreater\n        duration_lesser: $durationLesser\n        duration_greater: $durationGreater\n        chapters_lesser: $chapterLesser\n        chapters_greater: $chapterGreater\n        volumes_lesser: $volumeLesser\n        volumes_greater: $volumeGreater\n        licensedById_in: $licensedBy\n        isLicensed: $isLicensed\n        genre_in: $genres\n        genre_not_in: $excludedGenres\n        tag_in: $tags\n        tag_not_in: $excludedTags\n        minimumTagRank: $minimumTagRank\n        sort: $sort\n        isAdult: $isAdult\n        genre: $genre\n        averageScore: $averageScore\n        tagCategory: $tagCategory\n        tag: $tag\n      ) {\n        id\n        title {\n          english\n          native\n          romaji\n        }\n        isAdult\n        seasonYear\n        format\n        averageScore\n        coverImage {\n          color\n          large\n        }\n        tags {\n          category\n          description\n          isAdult\n          rank\n          name\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;